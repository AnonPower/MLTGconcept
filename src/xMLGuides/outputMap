if(toLinkingIn.isEmpty())
{
	if(useLinkingIn.isEmpty())
	{
		if(objIn.isEmpty())
		{
			if(charsIn.isEmpty())
			{
				//command only
				
				//print command
				try
				{
					if(commandIn.get(1).isEmpty())
					{
						output += ("You " + commandIn.get(0));
					}
					else
					{
						y = 0;
						StringTokenizer st = new StringTokenizer(input);
						while(y == 0)
						{
							tokenStor = st.nextToken();
							
							if(commandIn.contains(tokenStor))
							{
								y++;
								commandIn.add(commandIn.get(0));
								commandIn.set(0, tokenStor);
								int y3 = 0;
								StringTokenizer st2 = new StringTokenizer(input);
								while(y3 == 0)
								{
									tokenStor = st2.nextToken();
									
									if((commandIn.contains(tokenStor)))
									{
										if(commandIn.get(0).equals(tokenStor))
										{
										}
										else
										{
											y3++;
											commandIn.set(1, tokenStor);
										}
									}
								}
							}
						}
						output += ("You " + commandIn.get(0)+ " and then " + commandIn.get(1));
					}
				}
				catch(Exception e)
				{
					output += ("You " + commandIn.get(0));
				}
				//end print command
			}
			else
			{
				//command + char = command effects char
				
				//print command
				try
				{
					if(commandIn.get(1).isEmpty())
					{
						output += ("You " + commandIn.get(0));
					}
					else
					{
						y = 0;
						StringTokenizer st = new StringTokenizer(input);
						while(y == 0)
						{
							tokenStor = st.nextToken();
							
							if(commandIn.contains(tokenStor))
							{
								y++;
								commandIn.add(commandIn.get(0));
								commandIn.set(0, tokenStor);
								int y3 = 0;
								StringTokenizer st2 = new StringTokenizer(input);
								while(y3 == 0)
								{
									tokenStor = st2.nextToken();
									
									if((commandIn.contains(tokenStor)))
									{
										if(commandIn.get(0).equals(tokenStor))
										{
										}
										else
										{
											y3++;
											commandIn.set(1, tokenStor);
										}
									}
								}
							}
						}
						output += ("You " + commandIn.get(0)+ " and then " + commandIn.get(1));
					}
				}
				catch(Exception e)
				{
					output += ("You " + commandIn.get(0));
				}
				//end print command
				
				//print char
				try
				{
					if(charsIn.get(1).isEmpty())
					{
						output += (" " + charsIn.get(0));
					}
					else
					{
						y = 0;
						StringTokenizer st = new StringTokenizer(input);
						while(y == 0)
						{
							tokenStor = st.nextToken();
							
							if(commandIn.contains(tokenStor))
							{
								y++;
								charsIn.add(charsIn.get(0));
								charsIn.set(0, tokenStor);
								int y3 = 0;
								StringTokenizer st2 = new StringTokenizer(input);
								while(y3 == 0)
								{
									tokenStor = st2.nextToken();
									
									if((charsIn.contains(tokenStor)))
									{
										if(charsIn.get(0).equals(tokenStor))
										{
										}
										else
										{
											y3++;
											charsIn.set(1, tokenStor);
										}
									}
								}
							}
						}
						output += (" " + charsIn.get(0));
					}
				}
				catch(Exception e)
				{
					output += (" " + charsIn.get(0));
				}
				//end print char
			}
		}
		else
		{
			if(charsIn.isEmpty())
			{
				//command + obj = command effects object
				
				//print command
				try
				{
					if(commandIn.get(1).isEmpty())
					{
						output += ("You " + commandIn.get(0));
					}
					else
					{
						y = 0;
						StringTokenizer st = new StringTokenizer(input);
						while(y == 0)
						{
							tokenStor = st.nextToken();
							
							if(commandIn.contains(tokenStor))
							{
								y++;
								commandIn.add(commandIn.get(0));
								commandIn.set(0, tokenStor);
								int y3 = 0;
								StringTokenizer st2 = new StringTokenizer(input);
								while(y3 == 0)
								{
									tokenStor = st2.nextToken();
									
									if((commandIn.contains(tokenStor)))
									{
										if(commandIn.get(0).equals(tokenStor))
										{
										}
										else
										{
											y3++;
											commandIn.set(1, tokenStor);
										}
									}
								}
							}
						}
						output += ("You " + commandIn.get(0)+ " and then " + commandIn.get(1));
					}
				}
				catch(Exception e)
				{
					output += ("You " + commandIn.get(0));
				}
				//end print command
				
				//print obj
				try
				{
					if(objIn.get(1).isEmpty())
					{
						if(objIn.get(0).startsWith("a") || objIn.get(0).startsWith("A") || objIn.get(0).startsWith("i") || objIn.get(0).startsWith("i") || objIn.get(0).startsWith("o") || objIn.get(0).startsWith("O") || objIn.get(0).startsWith("u") || objIn.get(0).startsWith("U") || objIn.get(0).startsWith("e") || objIn.get(0).startsWith("E"))
						{
							if(objIn.get(0).endsWith("s"))
							{
								output += (" " + objIn.get(0));
							}
							else
							{
								output += (" an " + objIn.get(0));
							}
						}
						else
						{
							if(objIn.get(0).endsWith("s"))
							{
								output += (" the " + objIn.get(0));
							}
							else
							{
								output += (" a " + objIn.get(0));
							}
						}
					}
					else
					{
						y = 0;
						StringTokenizer st = new StringTokenizer(input);
						while(y == 0)
						{
							tokenStor = st.nextToken();
							
							if(objIn.contains(tokenStor))
							{
								y++;
								objIn.add(objIn.get(0));
								objIn.set(0, tokenStor);
								int y3 = 0;
								StringTokenizer st2 = new StringTokenizer(input);
								while(y3 == 0)
								{
									tokenStor = st2.nextToken();
									
									if((objIn.contains(tokenStor)))
									{
										if(objIn.get(0).equals(tokenStor))
										{
										}
										else
										{
											y3++;
											objIn.set(1, tokenStor);
										}
									}
								}
							}
						}
						if(objIn.get(0).startsWith("a") || objIn.get(0).startsWith("A") || objIn.get(0).startsWith("i") || objIn.get(0).startsWith("i") || objIn.get(0).startsWith("o") || objIn.get(0).startsWith("O") || objIn.get(0).startsWith("u") || objIn.get(0).startsWith("U") || objIn.get(0).startsWith("e") || objIn.get(0).startsWith("E"))
						{
							if(objIn.get(0).endsWith("s"))
							{
								output += (" " + objIn.get(0));
							}
							else
							{
								output += (" an " + objIn.get(0));
							}
						}
						else
						{
							if(objIn.get(0).endsWith("s"))
							{
								output += (" the " + objIn.get(0));
							}
							else
							{
								output += (" a " + objIn.get(0));
							}
						}
					}
				}
				catch(Exception e)
				{
					if(objIn.get(0).startsWith("a") || objIn.get(0).startsWith("A") || objIn.get(0).startsWith("i") || objIn.get(0).startsWith("i") || objIn.get(0).startsWith("o") || objIn.get(0).startsWith("O") || objIn.get(0).startsWith("u") || objIn.get(0).startsWith("U") || objIn.get(0).startsWith("e") || objIn.get(0).startsWith("E"))
					{
						if(objIn.get(0).endsWith("s"))
						{
							output += (" " + objIn.get(0));
						}
						else
						{
							output += (" an " + objIn.get(0));
						}
					}
					else
					{
						if(objIn.get(0).endsWith("s"))
						{
							output += (" the " + objIn.get(0));
						}
						else
						{
							output += (" a " + objIn.get(0));
						}
					}
				}
				//end print obj
			}
			else
			{
				//command + (char + obj) = bigmacnope.wav (for now, it is error, will be, which comes first)
				
				//print Computer says, "No."
				output += ("Your computer says, "No."");
			}
		}
	}
	else
	{
		if(objIn.isEmpty())
		{
			if(charsIn.isEmpty())
			{
				//command + useLinking = command only
				
				//print command
				try
				{
					if(commandIn.get(1).isEmpty())
					{
						output += ("You " + commandIn.get(0));
					}
					else
					{
						y = 0;
						StringTokenizer st = new StringTokenizer(input);
						while(y == 0)
						{
							tokenStor = st.nextToken();
							
							if(commandIn.contains(tokenStor))
							{
								y++;
								commandIn.add(commandIn.get(0));
								commandIn.set(0, tokenStor);
								int y3 = 0;
								StringTokenizer st2 = new StringTokenizer(input);
								while(y3 == 0)
								{
									tokenStor = st2.nextToken();
									
									if((commandIn.contains(tokenStor)))
									{
										if(commandIn.get(0).equals(tokenStor))
										{
										}
										else
										{
											y3++;
											commandIn.set(1, tokenStor);
										}
									}
								}
							}
						}
						output += ("You " + commandIn.get(0)+ " and then " + commandIn.get(1));
					}
				}
				catch(Exception e)
				{
					output += ("You " + commandIn.get(0));
				}
				//end print command
			}
			else
			{
				//command + useLinking + char = command effects char (for now, useLinking ignored, special exceptions to be included, i.e. fuck with twilight sparkle)
				
				//print command
				try
				{
					if(commandIn.get(1).isEmpty())
					{
						output += ("You " + commandIn.get(0));
					}
					else
					{
						y = 0;
						StringTokenizer st = new StringTokenizer(input);
						while(y == 0)
						{
							tokenStor = st.nextToken();
							
							if(commandIn.contains(tokenStor))
							{
								y++;
								commandIn.add(commandIn.get(0));
								commandIn.set(0, tokenStor);
								int y3 = 0;
								StringTokenizer st2 = new StringTokenizer(input);
								while(y3 == 0)
								{
									tokenStor = st2.nextToken();
									
									if((commandIn.contains(tokenStor)))
									{
										if(commandIn.get(0).equals(tokenStor))
										{
										}
										else
										{
											y3++;
											commandIn.set(1, tokenStor);
										}
									}
								}
							}
						}
						output += ("You " + commandIn.get(0)+ " and then " + commandIn.get(1));
					}
				}
				catch(Exception e)
				{
					output += ("You " + commandIn.get(0));
				}
				//end print command
				
				//print char
				try
				{
					if(charsIn.get(1).isEmpty())
					{
						output += (" " + charsIn.get(0));
					}
					else
					{
						y = 0;
						StringTokenizer st = new StringTokenizer(input);
						while(y == 0)
						{
							tokenStor = st.nextToken();
							
							if(commandIn.contains(tokenStor))
							{
								y++;
								charsIn.add(charsIn.get(0));
								charsIn.set(0, tokenStor);
								int y3 = 0;
								StringTokenizer st2 = new StringTokenizer(input);
								while(y3 == 0)
								{
									tokenStor = st2.nextToken();
									
									if((charsIn.contains(tokenStor)))
									{
										if(charsIn.get(0).equals(tokenStor))
										{
										}
										else
										{
											y3++;
											charsIn.set(1, tokenStor);
										}
									}
								}
							}
						}
						output += (" " + charsIn.get(0));
					}
				}
				catch(Exception e)
				{
					output += (" " + charsIn.get(0));
				}
				//end print char
			}
		}
		else
		{
			if(charsIn.isEmpty())
			{
				//command + useLinking + obj = player uses obj with command
				
				//print command
				try
				{
					if(commandIn.get(1).isEmpty())
					{
						output += ("You " + commandIn.get(0));
					}
					else
					{
						y = 0;
						StringTokenizer st = new StringTokenizer(input);
						while(y == 0)
						{
							tokenStor = st.nextToken();
							
							if(commandIn.contains(tokenStor))
							{
								y++;
								commandIn.add(commandIn.get(0));
								commandIn.set(0, tokenStor);
								int y3 = 0;
								StringTokenizer st2 = new StringTokenizer(input);
								while(y3 == 0)
								{
									tokenStor = st2.nextToken();
									
									if((commandIn.contains(tokenStor)))
									{
										if(commandIn.get(0).equals(tokenStor))
										{
										}
										else
										{
											y3++;
											commandIn.set(1, tokenStor);
										}
									}
								}
							}
						}
						output += ("You " + commandIn.get(0)+ " and then " + commandIn.get(1));
					}
				}
				catch(Exception e)
				{
					output += ("You " + commandIn.get(0));
				}
				//end print command
				
				//print use
				try
				{
					if(useLinkingIn.get(1).isEmpty())
					{
						output += (" " + useLinkingIn.get(0));
					}
					else
					{
						y = 0;
						StringTokenizer st = new StringTokenizer(input);
						while(y == 0)
						{
							tokenStor = st.nextToken();
							
							if(useLinkingIn.contains(tokenStor))
							{
								y++;
								useLinkingIn.add(useLinkingIn.get(0));
								useLinkingIn.set(0, tokenStor);
								int y3 = 0;
								StringTokenizer st2 = new StringTokenizer(input);
								while(y3 == 0)
								{
									tokenStor = st2.nextToken();
									
									if((useLinkingIn.contains(tokenStor)))
									{
										if(useLinkingIn.get(0).equals(tokenStor))
										{
										}
										else
										{
											y3++;
											useLinkingIn.set(1, tokenStor);
										}
									}
								}
							}
						}
						output += (" " + useLinkingIn.get(0));
					}
				}
				catch(Exception e)
				{
					output += (" " + useLinkingIn.get(0));
				}
				//end print use
				
				//print obj
				try
				{
					if(objIn.get(1).isEmpty())
					{
						if(objIn.get(0).startsWith("a") || objIn.get(0).startsWith("A") || objIn.get(0).startsWith("i") || objIn.get(0).startsWith("i") || objIn.get(0).startsWith("o") || objIn.get(0).startsWith("O") || objIn.get(0).startsWith("u") || objIn.get(0).startsWith("U") || objIn.get(0).startsWith("e") || objIn.get(0).startsWith("E"))
						{
							if(objIn.get(0).endsWith("s"))
							{
								output += (" " + objIn.get(0));
							}
							else
							{
								output += (" an " + objIn.get(0));
							}
						}
						else
						{
							if(objIn.get(0).endsWith("s"))
							{
								output += (" the " + objIn.get(0));
							}
							else
							{
								output += (" a " + objIn.get(0));
							}
						}
					}
					else
					{
						y = 0;
						StringTokenizer st = new StringTokenizer(input);
						while(y == 0)
						{
							tokenStor = st.nextToken();
							
							if(objIn.contains(tokenStor))
							{
								y++;
								objIn.add(objIn.get(0));
								objIn.set(0, tokenStor);
								int y3 = 0;
								StringTokenizer st2 = new StringTokenizer(input);
								while(y3 == 0)
								{
									tokenStor = st2.nextToken();
									
									if((objIn.contains(tokenStor)))
									{
										if(objIn.get(0).equals(tokenStor))
										{
										}
										else
										{
											y3++;
											objIn.set(1, tokenStor);
										}
									}
								}
							}
						}
						if(objIn.get(0).startsWith("a") || objIn.get(0).startsWith("A") || objIn.get(0).startsWith("i") || objIn.get(0).startsWith("i") || objIn.get(0).startsWith("o") || objIn.get(0).startsWith("O") || objIn.get(0).startsWith("u") || objIn.get(0).startsWith("U") || objIn.get(0).startsWith("e") || objIn.get(0).startsWith("E"))
						{
							if(objIn.get(0).endsWith("s"))
							{
								output += (" " + objIn.get(0));
							}
							else
							{
								output += (" an " + objIn.get(0));
							}
						}
						else
						{
							if(objIn.get(0).endsWith("s"))
							{
								output += (" the " + objIn.get(0));
							}
							else
							{
								output += (" a " + objIn.get(0));
							}
						}
					}
				}
				catch(Exception e)
				{
					if(objIn.get(0).startsWith("a") || objIn.get(0).startsWith("A") || objIn.get(0).startsWith("i") || objIn.get(0).startsWith("i") || objIn.get(0).startsWith("o") || objIn.get(0).startsWith("O") || objIn.get(0).startsWith("u") || objIn.get(0).startsWith("U") || objIn.get(0).startsWith("e") || objIn.get(0).startsWith("E"))
					{
						if(objIn.get(0).endsWith("s"))
						{
							output += (" " + objIn.get(0));
						}
						else
						{
							output += (" an " + objIn.get(0));
						}
					}
					else
					{
						if(objIn.get(0).endsWith("s"))
						{
							output += (" the " + objIn.get(0));
						}
						else
						{
							output += (" a " + objIn.get(0));
						}
					}
				}
				//end print obj
			}
			else
			{
				//command + char + useLinking + obj = player uses obj with command on char
				
				//print command
				try
				{
					if(commandIn.get(1).isEmpty())
					{
						output += ("You " + commandIn.get(0));
					}
					else
					{
						y = 0;
						StringTokenizer st = new StringTokenizer(input);
						while(y == 0)
						{
							tokenStor = st.nextToken();
							
							if(commandIn.contains(tokenStor))
							{
								y++;
								commandIn.add(commandIn.get(0));
								commandIn.set(0, tokenStor);
								int y3 = 0;
								StringTokenizer st2 = new StringTokenizer(input);
								while(y3 == 0)
								{
									tokenStor = st2.nextToken();
									
									if((commandIn.contains(tokenStor)))
									{
										if(commandIn.get(0).equals(tokenStor))
										{
										}
										else
										{
											y3++;
											commandIn.set(1, tokenStor);
										}
									}
								}
							}
						}
						output += ("You " + commandIn.get(0)+ " and then " + commandIn.get(1));
					}
				}
				catch(Exception e)
				{
					output += ("You " + commandIn.get(0));
				}
				//end print command
				
				//print use
				try
				{
					if(useLinkingIn.get(1).isEmpty())
					{
						output += (" " + useLinkingIn.get(0));
					}
					else
					{
						y = 0;
						StringTokenizer st = new StringTokenizer(input);
						while(y == 0)
						{
							tokenStor = st.nextToken();
							
							if(useLinkingIn.contains(tokenStor))
							{
								y++;
								useLinkingIn.add(useLinkingIn.get(0));
								useLinkingIn.set(0, tokenStor);
								int y3 = 0;
								StringTokenizer st2 = new StringTokenizer(input);
								while(y3 == 0)
								{
									tokenStor = st2.nextToken();
									
									if((useLinkingIn.contains(tokenStor)))
									{
										if(useLinkingIn.get(0).equals(tokenStor))
										{
										}
										else
										{
											y3++;
											useLinkingIn.set(1, tokenStor);
										}
									}
								}
							}
						}
						output += (" " + useLinkingIn.get(0));
					}
				}
				catch(Exception e)
				{
					output += (" " + useLinkingIn.get(0));
				}
				//end print use
				
				//print obj
				try
				{
					if(objIn.get(1).isEmpty())
					{
						if(objIn.get(0).startsWith("a") || objIn.get(0).startsWith("A") || objIn.get(0).startsWith("i") || objIn.get(0).startsWith("i") || objIn.get(0).startsWith("o") || objIn.get(0).startsWith("O") || objIn.get(0).startsWith("u") || objIn.get(0).startsWith("U") || objIn.get(0).startsWith("e") || objIn.get(0).startsWith("E"))
						{
							if(objIn.get(0).endsWith("s"))
							{
								output += (" " + objIn.get(0));
							}
							else
							{
								output += (" an " + objIn.get(0));
							}
						}
						else
						{
							if(objIn.get(0).endsWith("s"))
							{
								output += (" the " + objIn.get(0));
							}
							else
							{
								output += (" a " + objIn.get(0));
							}
						}
					}
					else
					{
						y = 0;
						StringTokenizer st = new StringTokenizer(input);
						while(y == 0)
						{
							tokenStor = st.nextToken();
							
							if(objIn.contains(tokenStor))
							{
								y++;
								objIn.add(objIn.get(0));
								objIn.set(0, tokenStor);
								int y3 = 0;
								StringTokenizer st2 = new StringTokenizer(input);
								while(y3 == 0)
								{
									tokenStor = st2.nextToken();
									
									if((objIn.contains(tokenStor)))
									{
										if(objIn.get(0).equals(tokenStor))
										{
										}
										else
										{
											y3++;
											objIn.set(1, tokenStor);
										}
									}
								}
							}
						}
						if(objIn.get(0).startsWith("a") || objIn.get(0).startsWith("A") || objIn.get(0).startsWith("i") || objIn.get(0).startsWith("i") || objIn.get(0).startsWith("o") || objIn.get(0).startsWith("O") || objIn.get(0).startsWith("u") || objIn.get(0).startsWith("U") || objIn.get(0).startsWith("e") || objIn.get(0).startsWith("E"))
						{
							if(objIn.get(0).endsWith("s"))
							{
								output += (" " + objIn.get(0));
							}
							else
							{
								output += (" an " + objIn.get(0));
							}
						}
						else
						{
							if(objIn.get(0).endsWith("s"))
							{
								output += (" the " + objIn.get(0));
							}
							else
							{
								output += (" a " + objIn.get(0));
							}
						}
					}
				}
				catch(Exception e)
				{
					if(objIn.get(0).startsWith("a") || objIn.get(0).startsWith("A") || objIn.get(0).startsWith("i") || objIn.get(0).startsWith("i") || objIn.get(0).startsWith("o") || objIn.get(0).startsWith("O") || objIn.get(0).startsWith("u") || objIn.get(0).startsWith("U") || objIn.get(0).startsWith("e") || objIn.get(0).startsWith("E"))
					{
						if(objIn.get(0).endsWith("s"))
						{
							output += (" " + objIn.get(0));
						}
						else
						{
							output += (" an " + objIn.get(0));
						}
					}
					else
					{
						if(objIn.get(0).endsWith("s"))
						{
							output += (" the " + objIn.get(0));
						}
						else
						{
							output += (" a " + objIn.get(0));
						}
					}
				}
				//end print obj
				
				//print char
				try
				{
					if(charsIn.get(1).isEmpty())
					{
						output += (" " + charsIn.get(0));
					}
					else
					{
						y = 0;
						StringTokenizer st = new StringTokenizer(input);
						while(y == 0)
						{
							tokenStor = st.nextToken();
							
							if(commandIn.contains(tokenStor))
							{
								y++;
								charsIn.add(charsIn.get(0));
								charsIn.set(0, tokenStor);
								int y3 = 0;
								StringTokenizer st2 = new StringTokenizer(input);
								while(y3 == 0)
								{
									tokenStor = st2.nextToken();
									
									if((charsIn.contains(tokenStor)))
									{
										if(charsIn.get(0).equals(tokenStor))
										{
										}
										else
										{
											y3++;
											charsIn.set(1, tokenStor);
										}
									}
								}
							}
						}
						output += (" " + charsIn.get(0));
					}
				}
				catch(Exception e)
				{
					output += (" " + charsIn.get(0));
				}
				//end print char
			}
		}
	}
}
else
{
	if(useLinking.isEmpty())
	{
		if(objIn.isEmpty())
		{
			if(charsIn.isEmpty())
			{
				//command + toTarLinking = command only
				
				//print command
				try
				{
					if(commandIn.get(1).isEmpty())
					{
						output += ("You " + commandIn.get(0));
					}
					else
					{
						y = 0;
						StringTokenizer st = new StringTokenizer(input);
						while(y == 0)
						{
							tokenStor = st.nextToken();
							
							if(commandIn.contains(tokenStor))
							{
								y++;
								commandIn.add(commandIn.get(0));
								commandIn.set(0, tokenStor);
								int y3 = 0;
								StringTokenizer st2 = new StringTokenizer(input);
								while(y3 == 0)
								{
									tokenStor = st2.nextToken();
									
									if((commandIn.contains(tokenStor)))
									{
										if(commandIn.get(0).equals(tokenStor))
										{
										}
										else
										{
											y3++;
											commandIn.set(1, tokenStor);
										}
									}
								}
							}
						}
						output += ("You " + commandIn.get(0)+ " and then " + commandIn.get(1));
					}
				}
				catch(Exception e)
				{
					output += ("You " + commandIn.get(0));
				}
				//end print command
			}
			else
			{
				//command + toTarLinking + char = command effects char
				
				//print command
				try
				{
					if(commandIn.get(1).isEmpty())
					{
						output += ("You " + commandIn.get(0));
					}
					else
					{
						y = 0;
						StringTokenizer st = new StringTokenizer(input);
						while(y == 0)
						{
							tokenStor = st.nextToken();
							
							if(commandIn.contains(tokenStor))
							{
								y++;
								commandIn.add(commandIn.get(0));
								commandIn.set(0, tokenStor);
								int y3 = 0;
								StringTokenizer st2 = new StringTokenizer(input);
								while(y3 == 0)
								{
									tokenStor = st2.nextToken();
									
									if((commandIn.contains(tokenStor)))
									{
										if(commandIn.get(0).equals(tokenStor))
										{
										}
										else
										{
											y3++;
											commandIn.set(1, tokenStor);
										}
									}
								}
							}
						}
						output += ("You " + commandIn.get(0)+ " and then " + commandIn.get(1));
					}
				}
				catch(Exception e)
				{
					output += ("You " + commandIn.get(0));
				}
				//end print command
				
				//print char
				try
				{
					if(charsIn.get(1).isEmpty())
					{
						output += (" " + charsIn.get(0));
					}
					else
					{
						y = 0;
						StringTokenizer st = new StringTokenizer(input);
						while(y == 0)
						{
							tokenStor = st.nextToken();
							
							if(commandIn.contains(tokenStor))
							{
								y++;
								charsIn.add(charsIn.get(0));
								charsIn.set(0, tokenStor);
								int y3 = 0;
								StringTokenizer st2 = new StringTokenizer(input);
								while(y3 == 0)
								{
									tokenStor = st2.nextToken();
									
									if((charsIn.contains(tokenStor)))
									{
										if(charsIn.get(0).equals(tokenStor))
										{
										}
										else
										{
											y3++;
											charsIn.set(1, tokenStor);
										}
									}
								}
							}
						}
						output += (" " + charsIn.get(0));
					}
				}
				catch(Exception e)
				{
					output += (" " + charsIn.get(0));
				}
				//end print char
			}
		}
		else
		{
			if(charIn.isempty())
			{
				//command + toTarLinking + obj = command effects obj
				
				//print command
				try
				{
					if(commandIn.get(1).isEmpty())
					{
						output += ("You " + commandIn.get(0));
					}
					else
					{
						y = 0;
						StringTokenizer st = new StringTokenizer(input);
						while(y == 0)
						{
							tokenStor = st.nextToken();
							
							if(commandIn.contains(tokenStor))
							{
								y++;
								commandIn.add(commandIn.get(0));
								commandIn.set(0, tokenStor);
								int y3 = 0;
								StringTokenizer st2 = new StringTokenizer(input);
								while(y3 == 0)
								{
									tokenStor = st2.nextToken();
									
									if((commandIn.contains(tokenStor)))
									{
										if(commandIn.get(0).equals(tokenStor))
										{
										}
										else
										{
											y3++;
											commandIn.set(1, tokenStor);
										}
									}
								}
							}
						}
						output += ("You " + commandIn.get(0)+ " and then " + commandIn.get(1));
					}
				}
				catch(Exception e)
				{
					output += ("You " + commandIn.get(0));
				}
				//end print command
				
				//print obj
				try
				{
					if(objIn.get(1).isEmpty())
					{
						if(objIn.get(0).startsWith("a") || objIn.get(0).startsWith("A") || objIn.get(0).startsWith("i") || objIn.get(0).startsWith("i") || objIn.get(0).startsWith("o") || objIn.get(0).startsWith("O") || objIn.get(0).startsWith("u") || objIn.get(0).startsWith("U") || objIn.get(0).startsWith("e") || objIn.get(0).startsWith("E"))
						{
							if(objIn.get(0).endsWith("s"))
							{
								output += (" " + objIn.get(0));
							}
							else
							{
								output += (" an " + objIn.get(0));
							}
						}
						else
						{
							if(objIn.get(0).endsWith("s"))
							{
								output += (" the " + objIn.get(0));
							}
							else
							{
								output += (" a " + objIn.get(0));
							}
						}
					}
					else
					{
						y = 0;
						StringTokenizer st = new StringTokenizer(input);
						while(y == 0)
						{
							tokenStor = st.nextToken();
							
							if(objIn.contains(tokenStor))
							{
								y++;
								objIn.add(objIn.get(0));
								objIn.set(0, tokenStor);
								int y3 = 0;
								StringTokenizer st2 = new StringTokenizer(input);
								while(y3 == 0)
								{
									tokenStor = st2.nextToken();
									
									if((objIn.contains(tokenStor)))
									{
										if(objIn.get(0).equals(tokenStor))
										{
										}
										else
										{
											y3++;
											objIn.set(1, tokenStor);
										}
									}
								}
							}
						}
						if(objIn.get(0).startsWith("a") || objIn.get(0).startsWith("A") || objIn.get(0).startsWith("i") || objIn.get(0).startsWith("i") || objIn.get(0).startsWith("o") || objIn.get(0).startsWith("O") || objIn.get(0).startsWith("u") || objIn.get(0).startsWith("U") || objIn.get(0).startsWith("e") || objIn.get(0).startsWith("E"))
						{
							if(objIn.get(0).endsWith("s"))
							{
								output += (" " + objIn.get(0));
							}
							else
							{
								output += (" an " + objIn.get(0));
							}
						}
						else
						{
							if(objIn.get(0).endsWith("s"))
							{
								output += (" the " + objIn.get(0));
							}
							else
							{
								output += (" a " + objIn.get(0));
							}
						}
					}
				}
				catch(Exception e)
				{
					if(objIn.get(0).startsWith("a") || objIn.get(0).startsWith("A") || objIn.get(0).startsWith("i") || objIn.get(0).startsWith("i") || objIn.get(0).startsWith("o") || objIn.get(0).startsWith("O") || objIn.get(0).startsWith("u") || objIn.get(0).startsWith("U") || objIn.get(0).startsWith("e") || objIn.get(0).startsWith("E"))
					{
						if(objIn.get(0).endsWith("s"))
						{
							output += (" " + objIn.get(0));
						}
						else
						{
							output += (" an " + objIn.get(0));
						}
					}
					else
					{
						if(objIn.get(0).endsWith("s"))
						{
							output += (" the " + objIn.get(0));
						}
						else
						{
							output += (" a " + objIn.get(0));
						}
					}
				}
				//end print obj
			}
			else
			{
				//command + obj + toTarLinking + char = command with obj to char (To be revises with special exceptions i.e. push twilight sparkle into wall)
				
				//print command
				try
				{
					if(commandIn.get(1).isEmpty())
					{
						output += ("You " + commandIn.get(0));
					}
					else
					{
						y = 0;
						StringTokenizer st = new StringTokenizer(input);
						while(y == 0)
						{
							tokenStor = st.nextToken();
							
							if(commandIn.contains(tokenStor))
							{
								y++;
								commandIn.add(commandIn.get(0));
								commandIn.set(0, tokenStor);
								int y3 = 0;
								StringTokenizer st2 = new StringTokenizer(input);
								while(y3 == 0)
								{
									tokenStor = st2.nextToken();
									
									if((commandIn.contains(tokenStor)))
									{
										if(commandIn.get(0).equals(tokenStor))
										{
										}
										else
										{
											y3++;
											commandIn.set(1, tokenStor);
										}
									}
								}
							}
						}
						output += ("You " + commandIn.get(0)+ " and then " + commandIn.get(1));
					}
				}
				catch(Exception e)
				{
					output += ("You " + commandIn.get(0));
				}
				//end print command
				
				//print obj
				try
				{
					if(objIn.get(1).isEmpty())
					{
						if(objIn.get(0).startsWith("a") || objIn.get(0).startsWith("A") || objIn.get(0).startsWith("i") || objIn.get(0).startsWith("i") || objIn.get(0).startsWith("o") || objIn.get(0).startsWith("O") || objIn.get(0).startsWith("u") || objIn.get(0).startsWith("U") || objIn.get(0).startsWith("e") || objIn.get(0).startsWith("E"))
						{
							if(objIn.get(0).endsWith("s"))
							{
								output += (" " + objIn.get(0));
							}
							else
							{
								output += (" an " + objIn.get(0));
							}
						}
						else
						{
							if(objIn.get(0).endsWith("s"))
							{
								output += (" the " + objIn.get(0));
							}
							else
							{
								output += (" a " + objIn.get(0));
							}
						}
					}
					else
					{
						y = 0;
						StringTokenizer st = new StringTokenizer(input);
						while(y == 0)
						{
							tokenStor = st.nextToken();
							
							if(objIn.contains(tokenStor))
							{
								y++;
								objIn.add(objIn.get(0));
								objIn.set(0, tokenStor);
								int y3 = 0;
								StringTokenizer st2 = new StringTokenizer(input);
								while(y3 == 0)
								{
									tokenStor = st2.nextToken();
									
									if((objIn.contains(tokenStor)))
									{
										if(objIn.get(0).equals(tokenStor))
										{
										}
										else
										{
											y3++;
											objIn.set(1, tokenStor);
										}
									}
								}
							}
						}
						if(objIn.get(0).startsWith("a") || objIn.get(0).startsWith("A") || objIn.get(0).startsWith("i") || objIn.get(0).startsWith("i") || objIn.get(0).startsWith("o") || objIn.get(0).startsWith("O") || objIn.get(0).startsWith("u") || objIn.get(0).startsWith("U") || objIn.get(0).startsWith("e") || objIn.get(0).startsWith("E"))
						{
							if(objIn.get(0).endsWith("s"))
							{
								output += (" " + objIn.get(0));
							}
							else
							{
								output += (" an " + objIn.get(0));
							}
						}
						else
						{
							if(objIn.get(0).endsWith("s"))
							{
								output += (" the " + objIn.get(0));
							}
							else
							{
								output += (" a " + objIn.get(0));
							}
						}
					}
				}
				catch(Exception e)
				{
					if(objIn.get(0).startsWith("a") || objIn.get(0).startsWith("A") || objIn.get(0).startsWith("i") || objIn.get(0).startsWith("i") || objIn.get(0).startsWith("o") || objIn.get(0).startsWith("O") || objIn.get(0).startsWith("u") || objIn.get(0).startsWith("U") || objIn.get(0).startsWith("e") || objIn.get(0).startsWith("E"))
					{
						if(objIn.get(0).endsWith("s"))
						{
							output += (" " + objIn.get(0));
						}
						else
						{
							output += (" an " + objIn.get(0));
						}
					}
					else
					{
						if(objIn.get(0).endsWith("s"))
						{
							output += (" the " + objIn.get(0));
						}
						else
						{
							output += (" a " + objIn.get(0));
						}
					}
				}
				//end print obj
				
				//print toTar
				try
				{
					if(toLinkingIn.get(1).isEmpty())
					{
						output += (" " + toLinkingIn.get(0));
					}
					else
					{
						y = 0;
						StringTokenizer st = new StringTokenizer(input);
						while(y == 0)
						{
							tokenStor = st.nextToken();
							
							if(toLinkingIn.contains(tokenStor))
							{
								y++;
								toLinkingIn.add(toLinkingIn.get(0));
								toLinkingIn.set(0, tokenStor);
								int y3 = 0;
								StringTokenizer st2 = new StringTokenizer(input);
								while(y3 == 0)
								{
									tokenStor = st2.nextToken();
									
									if((toLinkingIn.contains(tokenStor)))
									{
										if(toLinkingIn.get(0).equals(tokenStor))
										{
										}
										else
										{
											y3++;
											toLinkingIn.set(1, tokenStor);
										}
									}
								}
							}
						}
						output += (" " + toLinkingIn.get(0));
					}
				}
				catch(Exception e)
				{
					output += (" " + toLinkingIn.get(0));
				}
				//end print toTar
				
				//print char
				try
				{
					if(charsIn.get(1).isEmpty())
					{
						output += (" " + charsIn.get(0));
					}
					else
					{
						y = 0;
						StringTokenizer st = new StringTokenizer(input);
						while(y == 0)
						{
							tokenStor = st.nextToken();
							
							if(commandIn.contains(tokenStor))
							{
								y++;
								charsIn.add(charsIn.get(0));
								charsIn.set(0, tokenStor);
								int y3 = 0;
								StringTokenizer st2 = new StringTokenizer(input);
								while(y3 == 0)
								{
									tokenStor = st2.nextToken();
									
									if((charsIn.contains(tokenStor)))
									{
										if(charsIn.get(0).equals(tokenStor))
										{
										}
										else
										{
											y3++;
											charsIn.set(1, tokenStor);
										}
									}
								}
							}
						}
						output += (" " + charsIn.get(0));
					}
				}
				catch(Exception e)
				{
					output += (" " + charsIn.get(0));
				}
				//end print char
			}
		}
	}
	else
	{
		if(objIn.isEmpty())
		{
			if(charsIn.isEmpty())
			{
				//command + useLinking + toTarLinking = command only
				
				//print command
				try
				{
					if(commandIn.get(1).isEmpty())
					{
						output += ("You " + commandIn.get(0));
					}
					else
					{
						y = 0;
						StringTokenizer st = new StringTokenizer(input);
						while(y == 0)
						{
							tokenStor = st.nextToken();
							
							if(commandIn.contains(tokenStor))
							{
								y++;
								commandIn.add(commandIn.get(0));
								commandIn.set(0, tokenStor);
								int y3 = 0;
								StringTokenizer st2 = new StringTokenizer(input);
								while(y3 == 0)
								{
									tokenStor = st2.nextToken();
									
									if((commandIn.contains(tokenStor)))
									{
										if(commandIn.get(0).equals(tokenStor))
										{
										}
										else
										{
											y3++;
											commandIn.set(1, tokenStor);
										}
									}
								}
							}
						}
						output += ("You " + commandIn.get(0)+ " and then " + commandIn.get(1));
					}
				}
				catch(Exception e)
				{
					output += ("You " + commandIn.get(0));
				}
				//end print command
			}
			else
			{
				//command + useLinking (+ char) + toTarLinking (+ char) = command on char (multiple char exception to be made, ie push twilight sparkle into rarity)
				
				//print command
				try
				{
					if(commandIn.get(1).isEmpty())
					{
						output += ("You " + commandIn.get(0));
					}
					else
					{
						y = 0;
						StringTokenizer st = new StringTokenizer(input);
						while(y == 0)
						{
							tokenStor = st.nextToken();
							
							if(commandIn.contains(tokenStor))
							{
								y++;
								commandIn.add(commandIn.get(0));
								commandIn.set(0, tokenStor);
								int y3 = 0;
								StringTokenizer st2 = new StringTokenizer(input);
								while(y3 == 0)
								{
									tokenStor = st2.nextToken();
									
									if((commandIn.contains(tokenStor)))
									{
										if(commandIn.get(0).equals(tokenStor))
										{
										}
										else
										{
											y3++;
											commandIn.set(1, tokenStor);
										}
									}
								}
							}
						}
						output += ("You " + commandIn.get(0)+ " and then " + commandIn.get(1));
					}
				}
				catch(Exception e)
				{
					output += ("You " + commandIn.get(0));
				}
				//end print command
				
				//print char
				try
				{
					if(charsIn.get(1).isEmpty())
					{
						output += (" " + charsIn.get(0));
					}
					else
					{
						y = 0;
						StringTokenizer st = new StringTokenizer(input);
						while(y == 0)
						{
							tokenStor = st.nextToken();
							
							if(commandIn.contains(tokenStor))
							{
								y++;
								charsIn.add(charsIn.get(0));
								charsIn.set(0, tokenStor);
								int y3 = 0;
								StringTokenizer st2 = new StringTokenizer(input);
								while(y3 == 0)
								{
									tokenStor = st2.nextToken();
									
									if((charsIn.contains(tokenStor)))
									{
										if(charsIn.get(0).equals(tokenStor))
										{
										}
										else
										{
											y3++;
											charsIn.set(1, tokenStor);
										}
									}
								}
							}
						}
						output += (" " + charsIn.get(0));
					}
				}
				catch(Exception e)
				{
					output += (" " + charsIn.get(0));
				}
				//end print char
			}
		}
		else
		{
			if(charsIn.isEmpty())
			{
				//command + useLinking (+ obj) + toTarLinking (+ obj) = command on obj (multiple obj exception to be made, ie hit wall with sword)
				
				//print command
				try
				{
					if(commandIn.get(1).isEmpty())
					{
						output += ("You " + commandIn.get(0));
					}
					else
					{
						y = 0;
						StringTokenizer st = new StringTokenizer(input);
						while(y == 0)
						{
							tokenStor = st.nextToken();
							
							if(commandIn.contains(tokenStor))
							{
								y++;
								commandIn.add(commandIn.get(0));
								commandIn.set(0, tokenStor);
								int y3 = 0;
								StringTokenizer st2 = new StringTokenizer(input);
								while(y3 == 0)
								{
									tokenStor = st2.nextToken();
									
									if((commandIn.contains(tokenStor)))
									{
										if(commandIn.get(0).equals(tokenStor))
										{
										}
										else
										{
											y3++;
											commandIn.set(1, tokenStor);
										}
									}
								}
							}
						}
						output += ("You " + commandIn.get(0)+ " and then " + commandIn.get(1));
					}
				}
				catch(Exception e)
				{
					output += ("You " + commandIn.get(0));
				}
				//end print command
				
				//print obj
				try
				{
					if(objIn.get(1).isEmpty())
					{
						if(objIn.get(0).startsWith("a") || objIn.get(0).startsWith("A") || objIn.get(0).startsWith("i") || objIn.get(0).startsWith("i") || objIn.get(0).startsWith("o") || objIn.get(0).startsWith("O") || objIn.get(0).startsWith("u") || objIn.get(0).startsWith("U") || objIn.get(0).startsWith("e") || objIn.get(0).startsWith("E"))
						{
							if(objIn.get(0).endsWith("s"))
							{
								output += (" " + objIn.get(0));
							}
							else
							{
								output += (" an " + objIn.get(0));
							}
						}
						else
						{
							if(objIn.get(0).endsWith("s"))
							{
								output += (" the " + objIn.get(0));
							}
							else
							{
								output += (" a " + objIn.get(0));
							}
						}
					}
					else
					{
						y = 0;
						StringTokenizer st = new StringTokenizer(input);
						while(y == 0)
						{
							tokenStor = st.nextToken();
							
							if(objIn.contains(tokenStor))
							{
								y++;
								objIn.add(objIn.get(0));
								objIn.set(0, tokenStor);
								int y3 = 0;
								StringTokenizer st2 = new StringTokenizer(input);
								while(y3 == 0)
								{
									tokenStor = st2.nextToken();
									
									if((objIn.contains(tokenStor)))
									{
										if(objIn.get(0).equals(tokenStor))
										{
										}
										else
										{
											y3++;
											objIn.set(1, tokenStor);
										}
									}
								}
							}
						}
						if(objIn.get(0).startsWith("a") || objIn.get(0).startsWith("A") || objIn.get(0).startsWith("i") || objIn.get(0).startsWith("i") || objIn.get(0).startsWith("o") || objIn.get(0).startsWith("O") || objIn.get(0).startsWith("u") || objIn.get(0).startsWith("U") || objIn.get(0).startsWith("e") || objIn.get(0).startsWith("E"))
						{
							if(objIn.get(0).endsWith("s"))
							{
								output += (" " + objIn.get(0));
							}
							else
							{
								output += (" an " + objIn.get(0));
							}
						}
						else
						{
							if(objIn.get(0).endsWith("s"))
							{
								output += (" the " + objIn.get(0));
							}
							else
							{
								output += (" a " + objIn.get(0));
							}
						}
					}
				}
				catch(Exception e)
				{
					if(objIn.get(0).startsWith("a") || objIn.get(0).startsWith("A") || objIn.get(0).startsWith("i") || objIn.get(0).startsWith("i") || objIn.get(0).startsWith("o") || objIn.get(0).startsWith("O") || objIn.get(0).startsWith("u") || objIn.get(0).startsWith("U") || objIn.get(0).startsWith("e") || objIn.get(0).startsWith("E"))
					{
						if(objIn.get(0).endsWith("s"))
						{
							output += (" " + objIn.get(0));
						}
						else
						{
							output += (" an " + objIn.get(0));
						}
					}
					else
					{
						if(objIn.get(0).endsWith("s"))
						{
							output += (" the " + objIn.get(0));
						}
						else
						{
							output += (" a " + objIn.get(0));
						}
					}
				}
				//end print obj
			}
			else
			{
				//command + useLinking + obj + toTarLinking + char = command using obj on char
				
				//print command
				try
				{
					if(commandIn.get(1).isEmpty())
					{
						output += ("You " + commandIn.get(0));
					}
					else
					{
						y = 0;
						StringTokenizer st = new StringTokenizer(input);
						while(y == 0)
						{
							tokenStor = st.nextToken();
							
							if(commandIn.contains(tokenStor))
							{
								y++;
								commandIn.add(commandIn.get(0));
								commandIn.set(0, tokenStor);
								int y3 = 0;
								StringTokenizer st2 = new StringTokenizer(input);
								while(y3 == 0)
								{
									tokenStor = st2.nextToken();
									
									if((commandIn.contains(tokenStor)))
									{
										if(commandIn.get(0).equals(tokenStor))
										{
										}
										else
										{
											y3++;
											commandIn.set(1, tokenStor);
										}
									}
								}
							}
						}
						output += ("You " + commandIn.get(0)+ " and then " + commandIn.get(1));
					}
				}
				catch(Exception e)
				{
					output += ("You " + commandIn.get(0));
				}
				//end print command
				
				//print useLinking
				try
				{
					if(useLinkingIn.get(1).isEmpty())
					{
						output += (" " + useLinkingIn.get(0));
					}
					else
					{
						y = 0;
						StringTokenizer st = new StringTokenizer(input);
						while(y == 0)
						{
							tokenStor = st.nextToken();
							
							if(useLinkingIn.contains(tokenStor))
							{
								y++;
								useLinkingIn.add(useLinkingIn.get(0));
								useLinkingIn.set(0, tokenStor);
								int y3 = 0;
								StringTokenizer st2 = new StringTokenizer(input);
								while(y3 == 0)
								{
									tokenStor = st2.nextToken();
									
									if((useLinkingIn.contains(tokenStor)))
									{
										if(useLinkingIn.get(0).equals(tokenStor))
										{
										}
										else
										{
											y3++;
											useLinkingIn.set(1, tokenStor);
										}
									}
								}
							}
						}
						output += (" " + useLinkingIn.get(0));
					}
				}
				catch(Exception e)
				{
					output += (" " + useLinkingIn.get(0));
				}
				//end print useLinking
				
				//print obj
				try
				{
					if(objIn.get(1).isEmpty())
					{
						if(objIn.get(0).startsWith("a") || objIn.get(0).startsWith("A") || objIn.get(0).startsWith("i") || objIn.get(0).startsWith("i") || objIn.get(0).startsWith("o") || objIn.get(0).startsWith("O") || objIn.get(0).startsWith("u") || objIn.get(0).startsWith("U") || objIn.get(0).startsWith("e") || objIn.get(0).startsWith("E"))
						{
							if(objIn.get(0).endsWith("s"))
							{
								output += (" " + objIn.get(0));
							}
							else
							{
								output += (" an " + objIn.get(0));
							}
						}
						else
						{
							if(objIn.get(0).endsWith("s"))
							{
								output += (" the " + objIn.get(0));
							}
							else
							{
								output += (" a " + objIn.get(0));
							}
						}
					}
					else
					{
						y = 0;
						StringTokenizer st = new StringTokenizer(input);
						while(y == 0)
						{
							tokenStor = st.nextToken();
							
							if(objIn.contains(tokenStor))
							{
								y++;
								objIn.add(objIn.get(0));
								objIn.set(0, tokenStor);
								int y3 = 0;
								StringTokenizer st2 = new StringTokenizer(input);
								while(y3 == 0)
								{
									tokenStor = st2.nextToken();
									
									if((objIn.contains(tokenStor)))
									{
										if(objIn.get(0).equals(tokenStor))
										{
										}
										else
										{
											y3++;
											objIn.set(1, tokenStor);
										}
									}
								}
							}
						}
						if(objIn.get(0).startsWith("a") || objIn.get(0).startsWith("A") || objIn.get(0).startsWith("i") || objIn.get(0).startsWith("i") || objIn.get(0).startsWith("o") || objIn.get(0).startsWith("O") || objIn.get(0).startsWith("u") || objIn.get(0).startsWith("U") || objIn.get(0).startsWith("e") || objIn.get(0).startsWith("E"))
						{
							if(objIn.get(0).endsWith("s"))
							{
								output += (" " + objIn.get(0));
							}
							else
							{
								output += (" an " + objIn.get(0));
							}
						}
						else
						{
							if(objIn.get(0).endsWith("s"))
							{
								output += (" the " + objIn.get(0));
							}
							else
							{
								output += (" a " + objIn.get(0));
							}
						}
					}
				}
				catch(Exception e)
				{
					if(objIn.get(0).startsWith("a") || objIn.get(0).startsWith("A") || objIn.get(0).startsWith("i") || objIn.get(0).startsWith("i") || objIn.get(0).startsWith("o") || objIn.get(0).startsWith("O") || objIn.get(0).startsWith("u") || objIn.get(0).startsWith("U") || objIn.get(0).startsWith("e") || objIn.get(0).startsWith("E"))
					{
						if(objIn.get(0).endsWith("s"))
						{
							output += (" " + objIn.get(0));
						}
						else
						{
							output += (" an " + objIn.get(0));
						}
					}
					else
					{
						if(objIn.get(0).endsWith("s"))
						{
							output += (" the " + objIn.get(0));
						}
						else
						{
							output += (" a " + objIn.get(0));
						}
					}
				}
				//end print obj
				
				//print toTar
				try
				{
					if(toLinkingIn.get(1).isEmpty())
					{
						output += (" " + toLinkingIn.get(0));
					}
					else
					{
						y = 0;
						StringTokenizer st = new StringTokenizer(input);
						while(y == 0)
						{
							tokenStor = st.nextToken();
							
							if(toLinkingIn.contains(tokenStor))
							{
								y++;
								toLinkingIn.add(toLinkingIn.get(0));
								toLinkingIn.set(0, tokenStor);
								int y3 = 0;
								StringTokenizer st2 = new StringTokenizer(input);
								while(y3 == 0)
								{
									tokenStor = st2.nextToken();
									
									if((toLinkingIn.contains(tokenStor)))
									{
										if(toLinkingIn.get(0).equals(tokenStor))
										{
										}
										else
										{
											y3++;
											toLinkingIn.set(1, tokenStor);
										}
									}
								}
							}
						}
						output += (" " + toLinkingIn.get(0));
					}
				}
				catch(Exception e)
				{
					output += (" " + toLinkingIn.get(0));
				}
				//end print toTar
				
				//print char
				try
				{
					if(charsIn.get(1).isEmpty())
					{
						output += (" " + charsIn.get(0));
					}
					else
					{
						y = 0;
						StringTokenizer st = new StringTokenizer(input);
						while(y == 0)
						{
							tokenStor = st.nextToken();
							
							if(commandIn.contains(tokenStor))
							{
								y++;
								charsIn.add(charsIn.get(0));
								charsIn.set(0, tokenStor);
								int y3 = 0;
								StringTokenizer st2 = new StringTokenizer(input);
								while(y3 == 0)
								{
									tokenStor = st2.nextToken();
									
									if((charsIn.contains(tokenStor)))
									{
										if(charsIn.get(0).equals(tokenStor))
										{
										}
										else
										{
											y3++;
											charsIn.set(1, tokenStor);
										}
									}
								}
							}
						}
						output += (" " + charsIn.get(0));
					}
				}
				catch(Exception e)
				{
					output += (" " + charsIn.get(0));
				}
				//end print char
			}
		}
	}
}